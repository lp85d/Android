#!/bin/bash

# –ß–ê–°–¢–¨ 2: –°–ò–°–¢–ï–ú–ê –°–ë–û–†–ö–ò
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è Android-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ Termux,
# —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç APK, –∏—Å–ø–æ–ª—å–∑—É—è –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∏–∑ source.sh.

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() { echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"; }
warn() { echo -e "${YELLOW}[WARNING] $1${NC}"; }
error() { echo -e "${RED}[ERROR] $1${NC}"; }
info() { echo -e "${BLUE}[INFO] $1${NC}"; }
debug() { echo -e "${PURPLE}[DEBUG] $1${NC}"; }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ Java
find_java_home() {
    log "–ü–æ–∏—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Java..." >&2
    local java_candidates=("$PREFIX/lib/jvm/java-17-openjdk" "$PREFIX/lib/jvm/java-21-openjdk" "$PREFIX/opt/openjdk")
    for candidate in "${java_candidates[@]}"; do
        if [ -d "$candidate" ] && [ -x "$candidate/bin/java" ]; then
            info "–ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π Java: $candidate" >&2
            echo "$candidate"
            return 0
        fi
    done
    local java_bin=$(which java 2>/dev/null || echo "")
    if [ -n "$java_bin" ]; then
        local potential_java_home=$(dirname "$(dirname "$java_bin")")
        if [ -d "$potential_java_home" ] && [ -x "$potential_java_home/bin/java" ]; then
            info "–ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π Java —á–µ—Ä–µ–∑ which: $potential_java_home" >&2
            echo "$potential_java_home"
            return 0
        fi
    fi
    error "Java –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ openjdk-17 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω." >&2
    return 1
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
install_packages() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
    local packages="openjdk-17 gradle wget curl unzip git ffmpeg proot"
    pkg update -y >/dev/null 2>&1
    for package in $packages; do
        if ! dpkg -l 2>/dev/null | grep -q "^ii.*$package "; then
            log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ $package..."
            pkg install -y "$package"
        else
            info "$package —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
    done
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
setup_environment() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã..."
    local java_home_path=$(find_java_home)
    [ $? -ne 0 ] && { error "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Java!"; exit 1; }
    
    export JAVA_HOME="$java_home_path"
    export ANDROID_SDK_ROOT="$HOME/AndroidBuild/android-sdk"
    export PATH="$PATH:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"
    
    local bashrc_file="$HOME/.bashrc"
    touch "$bashrc_file"
    sed -i '/export JAVA_HOME=/d' "$bashrc_file"
    sed -i '/export ANDROID_SDK_ROOT=/d' "$bashrc_file"
    
    {
        echo ""
        echo "# Android Development Environment"
        echo "export JAVA_HOME=\"$java_home_path\""
        echo "export ANDROID_SDK_ROOT=\"$ANDROID_SDK_ROOT\""
        echo "export PATH=\"\$PATH:\$ANDROID_SDK_ROOT/platform-tools:\$ANDROID_SDK_ROOT/cmdline-tools/latest/bin\""
    } >> "$bashrc_file"
    
    log "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã."
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Android SDK
setup_android_sdk() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Android SDK..."
    mkdir -p "$ANDROID_SDK_ROOT"
    cd "$ANDROID_SDK_ROOT"
    
    if [ ! -d "cmdline-tools/latest/bin" ]; then
        log "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ Android Command Line Tools..."
        local sdk_url="https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip"
        wget -O cmdline-tools.zip "$sdk_url"
        unzip -q cmdline-tools.zip
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
        rm -f cmdline-tools.zip
    fi
    
    export PATH="$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"
    log "–ü—Ä–∏–Ω—è—Ç–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–π Android SDK..."
    yes | sdkmanager --licenses >/dev/null 2>&1 || true
    
    local components=("platform-tools" "build-tools;34.0.0" "platforms;android-34")
    for component in "${components[@]}"; do
        log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ $component..."
        sdkmanager "$component"
    done
    log "‚úÖ Android SDK –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
create_android_project_structure() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ MySoundApp..."
    local project_dir="$HOME/MySoundApp"
    rm -rf "$project_dir"
    mkdir -p "$project_dir"
    
    local dirs=(
        "app/src/main/java/com/example/mysoundapp"
        "app/src/main/res/layout"
        "app/src/main/res/raw"
        "app/src/main/res/values"
        "app/src/main/res/xml"
        "app/src/main/res/mipmap-hdpi"
        "app/src/main/res/mipmap-mdpi"
    )
    for dir in "${dirs[@]}"; do
        mkdir -p "$project_dir/$dir"
    done

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º –∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
    source "$HOME/source.sh"
    create_project_files "$project_dir"

    log "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ gradle.properties..."
    cat > "$project_dir/gradle.properties" << 'EOF'
android.useAndroidX=true
android.enableJetifier=true
android.suppressUnsupportedCompileSdk=34
EOF
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gradle wrapper
setup_gradle_wrapper() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gradle wrapper..."
    cd "$HOME/MySoundApp"
    if [ ! -f "gradlew" ]; then
        # Save original files
        mv build.gradle build.gradle.bak
        mv settings.gradle settings.gradle.bak
        
        # Create temporary empty files
        echo "" > build.gradle
        echo "" > settings.gradle
        
        gradle wrapper --gradle-version="8.2"
        
        # Restore original files
        mv build.gradle.bak build.gradle
        mv settings.gradle.bak settings.gradle
        
        chmod +x gradlew
    fi
}

# –°–±–æ—Ä–∫–∞ APK
build_apk() {
    log "–°–±–æ—Ä–∫–∞ APK..."
    cd "$HOME/MySoundApp"
    ./gradlew clean
    if ./gradlew assembleDebug --stacktrace; then
        local apk_path="$HOME/MySoundApp/app/build/outputs/apk/debug/app-debug.apk"
        echo "========================================="
        echo "üéâ –£–°–ü–ï–•! APK —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!"
        echo "üì± –ü—É—Ç—å –∫ APK: $apk_path"
        echo "========================================="
        return 0
    else
        error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å APK"
        return 1
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ –£–ú–ù–´–ô –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ù–ê–°–¢–†–û–ô–©–ò–ö (–°–ò–°–¢–ï–ú–ê –°–ë–û–†–ö–ò)"
    
    install_packages
    setup_environment
    setup_android_sdk
    create_android_project_structure
    setup_gradle_wrapper
    
    if build_apk; then
        log "üéä –í–°–ï –ó–ê–î–ê–ß–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!"
    else
        error "‚ùå –°–±–æ—Ä–∫–∞ APK –Ω–µ —É–¥–∞–ª–∞—Å—å"
        exit 1
    fi
}

trap 'echo ""; error "–°–∫—Ä–∏–ø—Ç –ø—Ä–µ—Ä–≤–∞–Ω"; exit 1' INT TERM
main "$@"
